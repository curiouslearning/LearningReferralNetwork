# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from models.base_model_ import Model
from common import util


class ReferralRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, package_name: str=None, locale: str=None, total_sessions: int=None, average_session_length: int=None, days_since_last_session: int=None, progress_by_skill: Dict[str, int]=None, max_results: int=None):  # noqa: E501
        """ReferralRequest - a model defined in Swagger

        :param package_name: The package_name of this ReferralRequest.  # noqa: E501
        :type package_name: str
        :param locale: The locale of this ReferralRequest.  # noqa: E501
        :type locale: str
        :param total_sessions: The total_sessions of this ReferralRequest.  # noqa: E501
        :type total_sessions: int
        :param average_session_length: The average_session_length of this ReferralRequest.  # noqa: E501
        :type average_session_length: int
        :param days_since_last_session: The days_since_last_session of this ReferralRequest.  # noqa: E501
        :type days_since_last_session: int
        :param progress_by_skill: The progress_by_skill of this ReferralRequest.  # noqa: E501
        :type progress_by_skill: Dict[str, int]
        :param max_results: The max_results of this ReferralRequest.  # noqa: E501
        :type max_results: int
        """
        self.swagger_types = {
            'package_name': str,
            'locale': str,
            'total_sessions': int,
            'average_session_length': int,
            'days_since_last_session': int,
            'progress_by_skill': Dict[str, int],
            'max_results': int
        }

        self.attribute_map = {
            'package_name': 'package_name',
            'locale': 'locale',
            'total_sessions': 'total_sessions',
            'average_session_length': 'average_session_length',
            'days_since_last_session': 'days_since_last_session',
            'progress_by_skill': 'progress_by_skill',
            'max_results': 'max_results'
        }

        self._package_name = package_name
        self._locale = locale
        self._total_sessions = total_sessions
        self._average_session_length = average_session_length
        self._days_since_last_session = days_since_last_session
        self._progress_by_skill = progress_by_skill
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt) -> 'ReferralRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The referralRequest of this ReferralRequest.  # noqa: E501
        :rtype: ReferralRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def package_name(self) -> str:
        """Gets the package_name of this ReferralRequest.

        Package name of the application making this request. This field is used to provide additional context to the recommendation engine such as locale. For Android applications this would be the com.* package ID.  # noqa: E501

        :return: The package_name of this ReferralRequest.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name: str):
        """Sets the package_name of this ReferralRequest.

        Package name of the application making this request. This field is used to provide additional context to the recommendation engine such as locale. For Android applications this would be the com.* package ID.  # noqa: E501

        :param package_name: The package_name of this ReferralRequest.
        :type package_name: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")  # noqa: E501

        self._package_name = package_name

    @property
    def locale(self) -> str:
        """Gets the locale of this ReferralRequest.


        :return: The locale of this ReferralRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale: str):
        """Sets the locale of this ReferralRequest.


        :param locale: The locale of this ReferralRequest.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def total_sessions(self) -> int:
        """Gets the total_sessions of this ReferralRequest.


        :return: The total_sessions of this ReferralRequest.
        :rtype: int
        """
        return self._total_sessions

    @total_sessions.setter
    def total_sessions(self, total_sessions: int):
        """Sets the total_sessions of this ReferralRequest.


        :param total_sessions: The total_sessions of this ReferralRequest.
        :type total_sessions: int
        """
        if total_sessions is not None and total_sessions < 0:  # noqa: E501
            raise ValueError("Invalid value for `total_sessions`, must be a value greater than or equal to `0`")  # noqa: E501

        self._total_sessions = total_sessions

    @property
    def average_session_length(self) -> int:
        """Gets the average_session_length of this ReferralRequest.


        :return: The average_session_length of this ReferralRequest.
        :rtype: int
        """
        return self._average_session_length

    @average_session_length.setter
    def average_session_length(self, average_session_length: int):
        """Sets the average_session_length of this ReferralRequest.


        :param average_session_length: The average_session_length of this ReferralRequest.
        :type average_session_length: int
        """
        if average_session_length is not None and average_session_length < 0:  # noqa: E501
            raise ValueError("Invalid value for `average_session_length`, must be a value greater than or equal to `0`")  # noqa: E501

        self._average_session_length = average_session_length

    @property
    def days_since_last_session(self) -> int:
        """Gets the days_since_last_session of this ReferralRequest.


        :return: The days_since_last_session of this ReferralRequest.
        :rtype: int
        """
        return self._days_since_last_session

    @days_since_last_session.setter
    def days_since_last_session(self, days_since_last_session: int):
        """Sets the days_since_last_session of this ReferralRequest.


        :param days_since_last_session: The days_since_last_session of this ReferralRequest.
        :type days_since_last_session: int
        """
        if days_since_last_session is not None and days_since_last_session < 0:  # noqa: E501
            raise ValueError("Invalid value for `days_since_last_session`, must be a value greater than or equal to `0`")  # noqa: E501

        self._days_since_last_session = days_since_last_session

    @property
    def progress_by_skill(self) -> Dict[str, int]:
        """Gets the progress_by_skill of this ReferralRequest.


        :return: The progress_by_skill of this ReferralRequest.
        :rtype: Dict[str, int]
        """
        return self._progress_by_skill

    @progress_by_skill.setter
    def progress_by_skill(self, progress_by_skill: Dict[str, int]):
        """Sets the progress_by_skill of this ReferralRequest.


        :param progress_by_skill: The progress_by_skill of this ReferralRequest.
        :type progress_by_skill: Dict[str, int]
        """

        self._progress_by_skill = progress_by_skill

    @property
    def max_results(self) -> int:
        """Gets the max_results of this ReferralRequest.


        :return: The max_results of this ReferralRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results: int):
        """Sets the max_results of this ReferralRequest.


        :param max_results: The max_results of this ReferralRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:  # noqa: E501
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")  # noqa: E501
        if max_results is not None and max_results < 1:  # noqa: E501
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")  # noqa: E501

        self._max_results = max_results
